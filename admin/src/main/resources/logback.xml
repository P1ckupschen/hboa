<configuration debug="true" scan="true" scanPeriod="5 seconds"> <!--scan配置文件修改时重新加载-->
    <!--自定义日志输出路径-->
    <property name="LOG_HOME" value="/mnt/data/hboa/logs"/>
    <!--自定义日志留存天数-->
    <property name="LOG_MAX_MISTORY" value="90"/>
    <!--自定义单个文件大小，超过生成新的文件-->
    <property name="LOG_MAX_FILE_SIZE" value="10MB"/>
    <!--自定义日志总体的大小，超过将删除最旧的日志存档-->
    <property name="LOG_TOTAL_SIZE_CAP" value="100MB"/>


    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
        <withJansi>true</withJansi>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15} - %msg %n) </pattern>
        </encoder>
    </appender>

    <appender name="FILE_INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--自定义输出过滤器 对于ERROR级别的日志 ACCEPT接收-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
        </filter>

        <!--自定义滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/%d{yyyy-MM-dd_HH-mm}.%i.log</fileNamePattern>
            <!--单个文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--保存多少天日志-->
            <maxHistory>${LOG_MAX_MISTORY}</maxHistory>
            <!--日志最大容量-->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15} - %msg %n) </pattern>
        </encoder>
    </appender>

    <appender name="FILE_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>

        <!--自定义滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/error.%d{yyyy-MM-dd_HH-mm}.%i.log</fileNamePattern>
            <!--单个文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--保存多少天日志-->
            <maxHistory>${LOG_MAX_MISTORY}</maxHistory>
            <!--日志最大容量-->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15} - %msg %n) </pattern>
        </encoder>

    </appender>

    <appender name="FILE_JRR_ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>
        </filter>

        <!--自定义滚动策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${LOG_HOME}/jrr.error.%d{yyyy-MM-dd_HH-mm}.%i.log</fileNamePattern>
            <!--单个文件大小-->
            <maxFileSize>${LOG_MAX_FILE_SIZE}</maxFileSize>
            <!--保存多少天日志-->
            <maxHistory>${LOG_MAX_MISTORY}</maxHistory>
            <!--日志最大容量-->
            <totalSizeCap>${LOG_TOTAL_SIZE_CAP}</totalSizeCap>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %highlight(%-5level) %cyan(%logger{15} - %msg %n) </pattern>
        </encoder>

    </appender>


    <!--root级别的log-->
    <root level="info">
        <appender-ref ref="STDOUT"/>
        <appender-ref ref="FILE_INFO_LOG"/>
        <appender-ref ref="FILE_ERROR_LOG"/>
    </root>
    <logger name="com.cs.jrr" additivity="false" > <!--additivity是否传递给root-->
        <appender-ref ref="FILE_JRR_ERROR_LOG"/>
    </logger>
</configuration>
